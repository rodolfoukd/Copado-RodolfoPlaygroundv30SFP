{
  "recordTypeMap": {},
  "RecordSetBundles": [
    {
      "Records": [
        {
          "attributes": {
            "type": "copado__Function__c",
            "url": "/services/data/v59.0/sobjects/copado__Function__c/a0n7Q000000dQtlQAE"
          },
          "copado__API_Name__c": "createPromOrphanCheckmarx",
          "copado__Description__c": "Create a User story or Promotion orphan branch for more efficient SCA scans and Run the checkmarx scan",
          "copado__Image_Name__c": "cbsrlaowbenauz7nj0qcriifrxseww-checkmarx-docker:v1.0",
          "copado__Options__c": "[ ]",
          "copado__Parameters__c": "[ {\n  \"required\" : false,\n  \"name\" : \"userStoryId\",\n  \"defaultValue\" : \"\"\n}, {\n  \"required\" : true,\n  \"name\" : \"git_json\",\n  \"defaultValue\" : \"{$Context.Repository.Credential}\"\n}, {\n  \"name\" : \"CXSAST_PROJECT\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"CXSAST_SERVER\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"CXSAST_USERNAME\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"CXSAST_PASSWORD\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"CXSASTHIGH\",\n  \"defaultValue\" : \"99999\"\n}, {\n  \"name\" : \"CXSASTMEDIUM\",\n  \"defaultValue\" : \"99999\"\n}, {\n  \"name\" : \"CXSASTLOW\",\n  \"defaultValue\" : \"99999\"\n}, {\n  \"name\" : \"sourceBranch\",\n  \"defaultValue\" : \"\"\n}, {\n  \"name\" : \"promotionId\",\n  \"defaultValue\" : \"\"\n} ]",
          "copado__Script__c": "#!/bin/bash\nset -euo pipefail\nexport SHELLOPTS # export the settings for all subshells. Be careful with the \"u\" flag, some tools (maven) fails\ntrap 'echo \"##### there was an error with exit code $? on line $LINENO ${branch:-}\"' ERR\n\ncd /app\n\n# declare/log function parameters and set the default value if any\nparameter() {\n    local v; eval v=\"\\${$1:=}\"; [ -z \"$v\" ] && { printf -v \"$1\" \"%s\" \"${3:-}\"; eval v=\"\\${$1:=}\"; }; echo \"[parameter] $1=$v\"\n}\n# execute a command and print the time it took to run it. Useful for troubleshooting performance issues\nfunction profiler() { export TIMEFORMAT=\"[profiler] %R seconds: $1\"$'\\n'; time $@; }\n\nparameter git_json\nparameter CXSAST_PROJECT\nparameter CXSAST_SERVER\nparameter CXSAST_USERNAME\nparameter CXSAST_PASSWORD\nparameter CXSASTHIGH --optional 99999\nparameter CXSASTMEDIUM --optional 99999\nparameter CXSASTLOW --optional 99999\nparameter userStoryId --optional ''\nparameter promotionId --optional ''\nparameter sourceBranch --optional ''\n### Config\nSOURCE_BRANCH_PATH=\"/tmp/sourceBranch\"\nORPHAN_BRANCH_PATH=\"/tmp/git_orphan_branch\"\nORPHAN_BRANCH_NAME=\"${sourceBranch////$'-'}\"\nparameter ORPHAN_BRANCH_NAME\necho \"Here is the promotion id:_____ $promotionId\"\n\nnpm install --no-audit --progress=false jsforce\ncat <<'__HERE' > /tmp/getFilenamesFromUserStoryOrPromotion.js\nconst { execSync } = require(\"child_process\");\nconst fs = require('fs');\nconst jsforce = require('/app/node_modules/jsforce');\n\nconst copadoConn = new jsforce.Connection({\n    serverUrl : 'https://'+ new URL(process.env.CF_SF_ENDPOINT).hostname,\n    sessionId : process.env.CF_SF_SESSIONID\n});\n\nasync function getFilenamesFromUserStoryOrPromotion(userStoryId, promotionId) {\n    let response;\n    let userStoryIds = [];\n    let filenameMap = {};\n\n    if(userStoryId) {\n        userStoryIds.push(userStoryId);\n    }else{\n        // get all the user stories of this promotion\n        response = await copadoConn.query(\"SELECT copado__User_Story__c FROM copado__Promoted_User_Story__c WHERE copado__Promotion__c = '\"+promotionId+\"' ORDER BY LastModifiedDate ASC\");\n        for(const item of response.records) {\n            userStoryIds.push(item.copado__User_Story__c);\n        }\n\n        // also get the branch of the promotion from the step\n        response = await copadoConn.query(\"SELECT copado__Branch__c FROM copado__Step__c WHERE copado__Deployment__r.copado__Promotion__c = '\"+promotionId+\"' ORDER BY LastModifiedDate DESC\");\n        for(const item of response.records) {\n        \tif (item.copado__Branch__c){console.log('This is the branch to scan:',item.copado__Branch__c);\n            fs.writeFileSync('/tmp/promotionBranch.txt', item.copado__Branch__c );\n            break;\n            }\n        }\n   }\n\n    if(userStoryIds.length==0) {\n        throw new Error('There are no user stories to read in the Promotion, or there is no User Story');\n    }\n\n    userStoryIds = \"'\" + userStoryIds.join(\"','\") + \"'\"; // convert the list of ids to a list of SOQL ids\n    response = await copadoConn.query(\"SELECT copado__Metadata_API_Name__c FROM copado__User_Story_Metadata__c \"\n        +\"WHERE copado__User_Story__c IN (\"+userStoryIds+\") ORDER BY copado__Type__c, copado__Metadata_API_Name__c\");\n    for(const item of response.records) {\n        let filename;\n        let [t, n] = item.copado__Metadata_API_Name__c.split('.', 2);\n        switch(t) {\n            case 'ApexClass':\n                filename = `classes/${n}.cls`;\n                break;\n            case 'ApexTrigger':\n                filename = `triggers/${n}.trigger`;\n                break;\n            case 'ApexComponent':\n                filename = `components/${n}.component`;\n                break;\n            case 'ApexPage':\n                filename = `pages/${n}.page`;\n                break;\n            case 'LightningComponentBundle':\n                filename = `lwc/${n}`;\n                break;\n            case 'AuraDefinitionBundle':\n                filename = `aura/${n}`;\n                break;\n        }\n        if(!filename) {\n            continue;\n        }\n        filenameMap[filename] = filename;\n    }\n    return Object.values(filenameMap);\n}\n\nconst start = async () => {\n    const userStoryId = process.env.userStoryId;\n    const promotionId = process.env.promotionId;\n\n    console.time(\"getFilenamesFromUserStoryOrPromotion\");\n    const filenames = await getFilenamesFromUserStoryOrPromotion(userStoryId, promotionId);\n    console.timeEnd(\"getFilenamesFromUserStoryOrPromotion\");\n\n    for(const filename of filenames) {\n        console.log(filename);\n    }\n    fs.writeFileSync(process.argv[2], filenames.join('\\n') +'\\n');\n};\n\nstart();\n__HERE\n\n# get all the code (apex, lwc, aura) filenames of the user story or promotion and save them to a text file\nnode /tmp/getFilenamesFromUserStoryOrPromotion.js /tmp/files_to_copy.txt\n\n# if the file is empty, exit with an error\nif [[ ! -s /tmp/files_to_copy.txt ]]; then\n    copado -p 'There is no code to scan'  -e 'There is no code to scan'\n    exit 1;\nfi\n\nif [[ -s /tmp/promotionBranch.txt ]]; then\n    echo \"reading the branch from the Promotion itself\"\n    sourceBranch=\"$(cat /tmp/promotionBranch.txt)\"\n    echo \"Here is the sourceBranch:_______$sourceBranch\"\n    ### Config, again\n    SOURCE_BRANCH_PATH=\"/tmp/sourceBranch\"\n    ORPHAN_BRANCH_PATH=\"/tmp/git_orphan_branch\"\n    ORPHAN_BRANCH_NAME=\"${sourceBranch////$'-'}\"\n    parameter ORPHAN_BRANCH_NAME\n    echo\nfi\n\necho; echo \"Creating paths for feature/orphan branches...\"\nmkdir -p \"$SOURCE_BRANCH_PATH\" \"$ORPHAN_BRANCH_PATH\"\n\ncopado -p 'Repo Authentication & Cloning'\ncopado-git-get --depth 1 -d \"$SOURCE_BRANCH_PATH\" \"$sourceBranch\"\n# copy the repo to the orphan banch path. It is faster than fetching again\n# cp -aT \"$SOURCE_BRANCH_PATH\" \"$ORPHAN_BRANCH_PATH\" //NO PERMISSIONS\ncopado-git-get --depth 1 -d \"$ORPHAN_BRANCH_PATH\" \"$sourceBranch\"\n\n### Checkout orphan branch\ncd \"$ORPHAN_BRANCH_PATH\"\necho \"Checkout orphan branch...\"\ngit checkout --orphan \"$ORPHAN_BRANCH_NAME\"\ngit reset --hard\n\necho; echo \"Copying files from fb to Orphan Branch...\"\necho \"stub file\" > README.md\n\ncd \"$SOURCE_BRANCH_PATH\"\ntest -d ./force-app/main/default/ && cd ./force-app/main/default/ # NOTE: for local testing\n\n# copy all the files listen in /tmp/files_to_copy.txt , preserving directory structure\nwhile read FILE; do\n    destDir=\"$ORPHAN_BRANCH_PATH/$(dirname \"$FILE\")\"\n    mkdir -p \"$destDir\"\n    cp -av $FILE \"$destDir\" || true # do not fail in case the file does not exist (e.g. destructive changes)\ndone < /tmp/files_to_copy.txt\n\necho; echo \"Add & Commit file(s)...\"\ncd \"$ORPHAN_BRANCH_PATH\"\ngit add .\ngit commit -a -m \"US Code Commit\"\necho \"Push Orphan Branch to Remote\"\ngit push --force origin \"$ORPHAN_BRANCH_NAME\"\necho\n\ncopado -p '(5) Running Checkmarx Scan'\n\ncopado -p \"running CxSAST Scan...\"\nexitCode=0\ncopado -p '(7) Running Checkmarx CxSAST'\n#    echo '\n#scan.osa.include.files=\n#scan.osa.exclude.files=**/**\n#' >> /opt/cxconsole/config/cx_console.properties\n\n /opt/cxconsole/runCxConsole.sh scan \\\n        -v \\\n        -Log /dev/stdout \\\n        -ForceScan \\\n        -ProjectName \"$CXSAST_PROJECT\" \\\n        -CxServer \"$CXSAST_SERVER\" \\\n        -cxUser \"$CXSAST_USERNAME\" \\\n        -cxPassword \"$CXSAST_PASSWORD\" \\\n        -LocationType folder \\\n        -reportXML /app/cx_output_report.xml \\\n        -LocationPath \"$ORPHAN_BRANCH_PATH\" \\\n        -includeExcludePattern '**/*.cls,**/*.trigger,**/*.js,**/*.page,**/*.html,**/*.component' \\\n        -SASTHigh \"$CXSASTHIGH\" \\\n        -SASTMedium \"$CXSASTMEDIUM\" \\\n        -SASTLow \"$CXSASTLOW\" \\\n        |& tee -a /tmp/output.txt \\\n        || exitCode=$?\n# check the output. If runCxConsole says 'No files to zip', the command failed, but it was not an error\n# there were no changes, or there were no CODE changes, do not fail because nothing was scanned\nif grep -F 'No files to zip' /tmp/output.txt; then\n    exitCode=0;\nfi\n\n# check if there was a report generated and notify the end user\nif test -n /app/cx_output_report.*; then\n    # if there was a user story as a parameter, return it in the Result of the Function\n    if [[ -n \"$userStoryId\" ]]; then\n        copado -p \"Uploading Analysis Output\" -r '{ \"userstoryid\": \"'\"$userStoryId\"'\" }'\n    else\n        copado -p \"Uploading Analysis Output\"\n    fi\nelse\n    copado -p \"No Analysis Output was generated\" -r \"No Analysis Output was generated, because there is no code to scan or because of an error in the scanning\"\nfi\n\necho \"### exitCode=$exitCode\" \n\nls -al /app\n\n# if there are no parentids of testresultid or consolidatedResultId, upload to the Result object\n\ntest -f /app/cx_output_report.xml && copado -u /app/cx_output_report.xml\n\nif [ $exitCode = 10 ]; then\n    copado -p \"Failed on threshold SAST HIGH, over $CXSASTHIGH\" -e \"Failed on threshold SAST HIGH, over $CXSASTHIGH\"\nelif [ $exitCode = 11 ]; then\n    copado -p \"Failed on threshold SAST Medium, over $CXSASTMEDIUM\" -e \"Failed on threshold SAST Medium, over $CXSASTMEDIUM\"\nelif [ $exitCode = 12 ]; then\n    copado -p \"Failed on threshold SAST LOW, over $CXSASTLOW\" -e \"Failed on threshold SAST LOW, over $CXSASTLOW\"\nelif [ $exitCode != 0 ]; then\n    copado -p \"Errors\" -e \"Errors were detected in the scan\"\nfi\nexit $exitCode",
          "copado__Timeout__c": 999,
          "copado__Type__c": "Custom",
          "copado__Version__c": "2.3",
          "copado__Worker_Size__c": "S",
          "Id": "a0n7Q000000dQtlQAE",
          "LastReferencedDate": "2023-11-24T08:59:43.000+0000",
          "LastViewedDate": "2023-11-24T08:59:43.000+0000",
          "Name": "Checkmarx scan with orphan branch"
        }
      ],
      "ObjectType": "copado__Function__c"
    }
  ],
  "blobsByUID": {}
}